{:rename-macros {}, :renames {}, :use-macros {go-loop cljs.core.async.macros}, :excludes #{}, :name modal-synth.scheduler, :imports nil, :requires {cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async}, :defs {earlier? {:protocol-inline nil, :meta {:file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :line 6, :column 7, :end-line 6, :end-column 15, :arglists (quote ([new-event]))}, :name modal-synth.scheduler/earlier?, :variadic false, :file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :end-column 15, :method-params ([new-event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-event]))}, insert {:protocol-inline nil, :meta {:file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :line 14, :column 7, :end-line 14, :end-column 13, :arglists (quote ([queue new-event]))}, :name modal-synth.scheduler/insert, :variadic false, :file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :end-column 13, :method-params ([queue new-event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([queue new-event]))}, next-event-within-horizon? {:protocol-inline nil, :meta {:file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :line 19, :column 7, :end-line 19, :end-column 33, :arglists (quote ([scheduler now]))}, :name modal-synth.scheduler/next-event-within-horizon?, :variadic false, :file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :end-column 33, :method-params ([scheduler now]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([scheduler now]))}, create! {:protocol-inline nil, :meta {:file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :line 28, :column 7, :end-line 28, :end-column 14, :arglists (quote ([audio-context & {:keys [lookahead period], :or {lookahead 0.1, period 20}}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(audio-context {:keys [lookahead period], :or {lookahead 0.1, period 20}})], :arglists ([audio-context & {:keys [lookahead period], :or {lookahead 0.1, period 20}}]), :arglists-meta (nil)}}, :name modal-synth.scheduler/create!, :variadic true, :file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(audio-context {:keys [lookahead period], :or {lookahead 0.1, period 20}})], :arglists ([audio-context & {:keys [lookahead period], :or {lookahead 0.1, period 20}}]), :arglists-meta (nil)}, :method-params [(audio-context {:keys [lookahead period], :or {lookahead 0.1, period 20}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists ([audio-context & {:keys [lookahead period], :or {lookahead 0.1, period 20}}])}, call-at-time! {:protocol-inline nil, :meta {:file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :line 45, :column 7, :end-line 45, :end-column 20, :arglists (quote ([scheduler callback! at-time]))}, :name modal-synth.scheduler/call-at-time!, :variadic false, :file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :end-column 20, :method-params ([scheduler callback! at-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists (quote ([scheduler callback! at-time]))}, recursion-through-time! {:protocol-inline nil, :meta {:file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :line 52, :column 7, :end-line 52, :end-column 30, :arglists (quote ([scheduler callback! at-time])), :doc "Ripping off Extempore :)\n   callback! must return the time it should be called next,\n    or nil for end of sequence."}, :name modal-synth.scheduler/recursion-through-time!, :variadic false, :file "/mnt/windows/RoStuff/documents/apps/modal-synth/src/modal_synth/scheduler.cljs", :end-column 30, :method-params ([scheduler callback! at-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 3, :fn-var true, :arglists (quote ([scheduler callback! at-time])), :doc "Ripping off Extempore :)\n   callback! must return the time it should be called next,\n    or nil for end of sequence."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:callback! :else :lookahead :queue :time :recur :period}, :order [:time :queue :lookahead :period :recur :callback! :else]}, :doc nil}